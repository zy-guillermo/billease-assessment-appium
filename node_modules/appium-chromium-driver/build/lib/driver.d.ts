/**
 * @extends {BaseDriver<CDConstraints>}
 * @implements {ExternalDriver<CDConstraints>}
 */
export class ChromiumDriver extends BaseDriver<{
    readonly chromedriverPort: {
        readonly isNumber: true;
    };
    readonly useSystemExecutable: {
        readonly isBoolean: true;
    };
    readonly executable: {
        readonly isString: true;
    };
    readonly executableDir: {
        readonly isString: true;
    };
    readonly verbose: {
        readonly isBoolean: true;
    };
    readonly logPath: {
        readonly isString: true;
    };
    readonly autodownloadEnabled: {
        readonly isBoolean: true;
    };
    readonly disableBuildCheck: {
        readonly isBoolean: true;
    };
    readonly browserName: {
        readonly isString: true;
    };
}, import("@appium/types").StringRecord, import("@appium/types").StringRecord, import("@appium/types").DefaultCreateSessionResult<{
    readonly chromedriverPort: {
        readonly isNumber: true;
    };
    readonly useSystemExecutable: {
        readonly isBoolean: true;
    };
    readonly executable: {
        readonly isString: true;
    };
    readonly executableDir: {
        readonly isString: true;
    };
    readonly verbose: {
        readonly isBoolean: true;
    };
    readonly logPath: {
        readonly isString: true;
    };
    readonly autodownloadEnabled: {
        readonly isBoolean: true;
    };
    readonly disableBuildCheck: {
        readonly isBoolean: true;
    };
    readonly browserName: {
        readonly isString: true;
    };
}>, void, import("@appium/types").StringRecord> implements ExternalDriver<CDConstraints> {
    constructor(opts: import("@appium/types").InitialOpts, shouldValidateCaps?: boolean);
    _proxyActive: boolean;
    /** @type {Chromedriver|null} */
    cd: Chromedriver | null;
    proxyReqRes: any;
    proxyCommand: any;
    doesSupportBidi: boolean;
    /** @type {string|null} */
    _bidiProxyUrl: string | null;
    proxyActive(): boolean;
    canProxy(): boolean;
    /**
     *
     * @param {W3CChromiumDriverCaps} jsonwpDesiredCapabilities
     * @param {W3CChromiumDriverCaps} [jsonwpRequiredCaps]
     * @param {W3CChromiumDriverCaps} [w3cCapabilities]
     * @returns {Promise<[string,ChromiumDriverCaps]>}
     */
    createSession(jsonwpDesiredCapabilities: W3CChromiumDriverCaps, jsonwpRequiredCaps?: W3CChromiumDriverCaps, w3cCapabilities?: W3CChromiumDriverCaps): Promise<[string, ChromiumDriverCaps]>;
    getSessionCaps(): {};
    startChromedriverSession(): Promise<import("./types").ChromiumDriverCaps>;
    /**
     *
     * @param {string} [sessionId]
     * @returns {Promise<void>}
     */
    deleteSession(sessionId?: string): Promise<void>;
}
export default ChromiumDriver;
export type CDConstraints = typeof CD_CONSTRAINTS;
export type W3CChromiumDriverCaps = import("./types").W3CChromiumDriverCaps;
export type ChromiumDriverCaps = import("./types").ChromiumDriverCaps;
export type DriverData = import("@appium/types").DriverData;
export type ExternalDriver<C extends import("@appium/types").Constraints> = import("@appium/types").ExternalDriver<C>;
export type DriverOpts<C extends import("@appium/types").Constraints> = import("@appium/types").DriverOpts<C>;
import { BaseDriver } from 'appium/driver';
import { Chromedriver } from 'appium-chromedriver';
declare namespace CD_CONSTRAINTS {
    namespace chromedriverPort {
        let isNumber: true;
    }
    namespace useSystemExecutable {
        let isBoolean: true;
    }
    namespace executable {
        let isString: true;
    }
    namespace executableDir {
        let isString_1: true;
        export { isString_1 as isString };
    }
    namespace verbose {
        let isBoolean_1: true;
        export { isBoolean_1 as isBoolean };
    }
    namespace logPath {
        let isString_2: true;
        export { isString_2 as isString };
    }
    namespace autodownloadEnabled {
        let isBoolean_2: true;
        export { isBoolean_2 as isBoolean };
    }
    namespace disableBuildCheck {
        let isBoolean_3: true;
        export { isBoolean_3 as isBoolean };
    }
    namespace browserName {
        let isString_3: true;
        export { isString_3 as isString };
    }
}
//# sourceMappingURL=driver.d.ts.map